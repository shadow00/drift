#include <avr/interrupt.h>
#include <avr/io.h>
#include "ESC.h"

unsigned int ESCpin = 9;
unsigned int POTpin;  // DEFAULT POT PIN TO A5
unsigned int pot_value;
unsigned int throttle = 0;
unsigned long start = 0;
unsigned long stop = 0;
byte phase_step = 0;
volatile unsigned long counter = 0;
// volatile unsigned long counters[3] = {0};
unsigned long result = 0;
volatile unsigned long results[4] = {0};
volatile unsigned long times[4] = {0};
// volatile unsigned long t_i = 0;
float RPM;
// #define MAX_TICKS (100) // Max ticks to count within a sampling interval
#define SAMPLE_TIME (100000) // Maximum sampling interval (mus)

#define SPEED_MIN (1060) // Set the Minimum Speed in microseconds
#define SPEED_MAX (1860) // Set the Minimum Speed in microseconds
#define ARM_VAL (500) // Set the Arm Value in microseconds

ESC myESC(ESCpin, SPEED_MIN, SPEED_MAX, ARM_VAL); // ESC_Name (PIN, Minimum Value, Maximum Value, Arm Value)

String command;
const char arm_command = 'a';
const char thr_command = 't';
const char pot_command = 'p';
const char stop_command = 's';
const char calib_command = 'c';
const char escpin_command = 'e';
const char nothing_to_do = (char)0;
char cmd = nothing_to_do;  // Default command on first start
bool print_thr = true;
String thr_str;
String pot_str;


void measure_and_print_rpm() {
  times[0] = micros();
  results[0] = analogRead(A0);
  times[1] = micros();
  results[1] = analogRead(A1);
  times[2] = micros();
  results[2] = analogRead(A2);
  times[3] = micros();
  results[3] = analogRead(A3);
  // Serial.print('t');
  Serial.print(throttle);
  Serial.print(',');
  Serial.print(times[0]);
  Serial.print(',');
  Serial.print(results[0]);
  Serial.print(',');
  Serial.print(times[1]);
  Serial.print(',');
  Serial.print(results[1]);
  Serial.print(',');
  Serial.print(times[2]);
  Serial.print(',');
  Serial.print(results[2]);
  Serial.print(',');
  Serial.print(times[3]);
  Serial.print(',');
  Serial.print(results[3]);
  Serial.print('\n');
  // RPM = (float)(1e6 / (4.0 * (times[1] - times[0])));  // Working with micros
  // Serial.print(millis());
  // // Serial.print(" - Counted ");
  // Serial.print(" - thr ");
  // Serial.print(throttle);
  // Serial.print(" - ");
  // // Serial.print(result);
  // // Serial.print(counter);
  // // Serial.print(" ticks in ");
  // Serial.print(" 2 ticks in ");
  // Serial.print(times[1] - times[0]);
  // // Serial.print(stop - start);
  // // Serial.println(" ms");
  // // Serial.println(" mus");
  // // Serial.print(" ms - ");
  // Serial.print(" mus - ");
  // Serial.print(RPM);
  // Serial.println(" RPM");
}

void setup() {
  Serial.begin(115200);  // opens serial port, sets data rate to 9600 bps
  Serial.setTimeout(10);  // Set timeout to 10ms to waste less time when reading serial input
  // Serial.flush();
  String rdy = "Arduino is ready,";
  rdy.concat(millis());
  // Serial.print(rdy);
  Serial.println(rdy);

  // DIDR1 = (1<<AIN0D) | (1<<AIN1D); // Disable Digital Inputs at AIN0 and AIN1
	// ADCSRA |= (1<<ADEN);	// Turn on ADEN bit in ADCSRA (when ACME bit is 1) to use AIN1 -ve input
	// ADCSRA &= ~(1<<ADEN);  // Turn off ADEN bit in ADCSRA to use ADC0-ADC7 -ve input
	// ADCSRA &= ~(bit (ADPS0) | bit (ADPS1) | bit (ADPS2)); // clear prescaler bits
	// ADCSRA |= bit (ADPS0); // 2 bit prescaler, 1.625us per read
	ADCSRA |= bit (ADPS0) | bit (ADPS1); // 8 bit prescaler, 6.5us per read
	// ADCSRA |= bit (ADPS2); // 16 bit scale, 13us per read
  // ADCSRA |= bit (ADPS0) | bit (ADPS1) | bit (ADPS2);   // prescaler 128, 104 us per read
	// ADCSRB &= ~(1<<ACME);	// Clear ACME bits in ADCSRB to use AIN1 -ve input
	// ADCSRB |= (1<<ACME);	// Turn on ACME bit in ADCSRB to use ADC0-ADC7 -ve input
	// ACSR = 0x10;  // Disable and clear (flag bit) analog comparator interrupt
	// ADMUX = 0;		// Select analog pin ADCx
	// ACSR = 
	// 	(0 << ACD) |    // Analog Comparator: Enabled
	// 	(0 << ACBG) |   // Clear ACBG to use external input to AIN0 +ve input
	// 	(0 << ACO) |    // Analog Comparator Output: READ ONLY
	// 	(0 << ACI) |    // Analog Comparator Interrupt Flag: Clear Pending Interrupt by setting the bit
	// 	// (1 << ACIE) |   // Analog Comparator Interrupt: Enabled 
	// 	(0 << ACIE) |   // Analog Comparator Interrupt: Disabled 
	// 	(0 << ACIC) |   // Analog Comparator Input Capture: Disabled
	// 	// When changing the ACIS1/ACIS0 bits, the analog comparator interrupt must be disabled by clearing its interrupt enable bit
	// 	// in the ACSR register. Otherwise an interrupt can occur when the bits are changed.
	// 	(0 << ACIS1) | (0 << ACIS0);   // Analog Comparator Interrupt Mode: Comparator Interrupt on Output Toggle
	// 	// (1 << ACIS1) | (0 << ACIS0);   // Analog Comparator Interrupt Mode: Comparator Interrupt on Output Falling Edge
	// 	// (1 << ACIS1) | (1 << ACIS0);   // Analog Comparator Interrupt Mode: Comparator Interrupt on Output Raising Edge
	Serial.print("DIDR1: ");
	Serial.println(DIDR1, BIN);
	Serial.print("ADCSRA: ");
	Serial.println(ADCSRA, BIN);
	Serial.print("ADCSRB: ");
	Serial.println(ADCSRB, BIN);
	Serial.print("ADMUX: ");
	Serial.println(ADMUX, BIN);
	Serial.print("ACSR: ");
	Serial.println(ACSR, BIN);
}

void loop() {  
  while (Serial.available() == 0) {
    switch (cmd)
    {
    case arm_command:
      myESC.arm(); // Send the Arm value
      Serial.println("Sending ARM command");
      // Serial.flush();
      cmd = nothing_to_do;
      break;
    case thr_command:
      if (print_thr) {
        thr_str = "Set throttle to ";
        thr_str.concat(throttle);
        Serial.println(thr_str);
        print_thr = false;
      }
      // Serial.flush();
      myESC.speed(throttle); // sets the ESC speed according to the scaled value
      measure_and_print_rpm();
      // cmd = nothing_to_do;
      break;
    case pot_command:
      // if (print_thr) {
      //   thr_str = "Set throttle to ";
      //   thr_str.concat(throttle);
      //   Serial.println(thr_str);
      //   print_thr = false;
      // }
      pot_value = analogRead(POTpin);
      throttle = map(pot_value, 0, 1023, SPEED_MIN, SPEED_MAX);
      // throttle = map(pot_value, 0, 1023, SPEED_MIN, 1300); // Limit throttle
      // throttle = 1150;
      // pot_str = "Pin ";
      // pot_str.concat(POTpin);
      // pot_str.concat(" - Set throttle to ");
      // pot_str.concat(throttle);
      // Serial.println(pot_str);
      myESC.speed(throttle); // sets the ESC speed according to the scaled value
      // Serial.flush();
      measure_and_print_rpm();
      break;
    case stop_command:
      myESC.stop(); // Send the Stop value
      Serial.println("Sending STOP command");
      // Serial.flush();
      cmd = nothing_to_do;
      break;
    case calib_command:
      myESC.calib(); // Calibrate
      Serial.println("Throttle calibration");
      // Serial.flush();
      // cmd = arm_command; // Arm after calibration?
      cmd = nothing_to_do;
      break;
    case escpin_command:
      if (ESCpin > 1 && ESCpin <= NUM_DIGITAL_PINS) {
        Serial.print("Setting ESC to pin ");
        Serial.println(ESCpin);
        // Serial.flush();
        cmd = nothing_to_do;
      } else {
        Serial.print("WARNING: Invalid ESC pin ");
        Serial.println(ESCpin);
        // Serial.flush();
        cmd = nothing_to_do;
      }
      break;
    case nothing_to_do:
      if (print_thr) {
        Serial.println("Nothing to do");
        print_thr = false;
      }
      break;
    default:
      String resp = "Unrecognized command, doing nothing! cmd = '";
      resp.concat(command);
      Serial.println(resp);
      break;
    }
    // delay(5);
  }

  command = Serial.readStringUntil('\n'); // Note: the '\n' character is discarded from the serial buffer
  command.trim();
  unsigned int cmdlen = command.length();
  cmd = command.charAt(0);  // Warning: this limits the commands to a single character (one byte)

  // Warning: this matches the beginning of the string - there are no safety checks for what comes after!
  // Eg. by typing "as", this will match the arm command "a", becaues the input starts with "a"
  if (command.startsWith(String(arm_command))) {
    // cmd = arm_command;
  } else if (command.startsWith(String(thr_command))) {
    print_thr = true;
    if (cmdlen > 1 && cmdlen < 6) { // match "t0" - "t1024"
      throttle = command.substring(1).toInt();
    } else {
      cmd = nothing_to_do;
    }
    // cmd = thr_command;
  } else if (command.startsWith(String(pot_command))) {
    // print_thr = true;
    // "pa0"
    POTpin = A5; // DEFAULT POT PIN TO A5
    // if (cmdlen > 1) {
    //   String pot_str = command.substring(1);  // Assume there is no space after the 'p'
    //   pot_str.toLowerCase();
    //   // // if (pot_str.startsWith("a") && isDigit(pot_str.substring(1))) {}
    //   // if (pot_str.startsWith("a") && pot_str.substring(1).toInt()) {
    //   if (pot_str.startsWith("a")) {
    //     // Analog pins "a0" - "a7" for stuff like Arduino Uno, or "a11" for the Arduino Giga R1
    //     // https://github.com/arduino/ArduinoCore-avr/blob/master/variants/standard/pins_arduino.h#L28-L72
    //     // https://github.com/arduino/ArduinoCore-mbed/blob/main/variants/GIGA/pins_arduino.h#L21-L56
    //     int analog_pin_num = pot_str.substring(1).toInt();
    //     POTpin = NUM_DIGITAL_PINS - NUM_ANALOG_INPUTS + analog_pin_num;
    //   } else if (isDigit(pot_str[0])) {
    //     POTpin = pot_str.substring(0).toInt();
    //   }
    // } else {
    //   POTpin = A5; // DEFAULT POT PIN TO A5
    // }
    // cmd = pot_command;
  } else if (command.startsWith(String(stop_command))) {
    // cmd = stop_command;
  } else if (command.startsWith(String(calib_command))) {
    // cmd = calib_command;
  } else if (command.startsWith(String(escpin_command))) {
    // myESC.~ESC();
    // Warning: no error checking. If the string is invalid, this will return 0
    // and it will be rejected in the loop
    ESCpin = command.substring(1).toInt();
    myESC = ESC(ESCpin, SPEED_MIN, SPEED_MAX, ARM_VAL); // ESC_Name (PIN, Minimum Value, Maximum Value, Arm Value)
  } else {
    // cmd = wrong_command;
  }
}
